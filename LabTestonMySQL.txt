1.Create Table

a.Write a SQL statement to create a table named jobs including columns job_id,
 job_title, min_salary, max_salary and check whether the max_salary amount exceeding the upper limit 25000.

mysql> CREATE TABLE IF NOT EXISTS jobs ( 
    -> JOB_ID varchar(10) PRIMARY KEY , 
    -> JOB_TITLE varchar(35) NOT NULL, 
    -> MIN_SALARY decimal(6,0), 
    -> MAX_SALARY decimal(6,0) 
    -> CHECK(MAX_SALARY<=25000));
Query OK, 0 rows affected, 1 warning (0.20 sec)

mysql> DESC jobs;
+------------+--------------+------+-----+---------+-------+
| Field      | Type         | Null | Key | Default | Extra |
+------------+--------------+------+-----+---------+-------+
| JOB_ID     | varchar(10)  | NO   | PRI | NULL    |       |
| JOB_TITLE  | varchar(35)  | NO   |     | NULL    |       |
| MIN_SALARY | decimal(6,0) | YES  |     | NULL    |       |
| MAX_SALARY | decimal(6,0) | YES  |     | NULL    |       |
+------------+--------------+------+-----+---------+-------+
4 rows in set (0.15 sec)


b. Write a SQL statement to create a table named countries including columns country_id, 
country_name and region_id and make sure that no countries except Italy, India and China 
will be entered in the table.

mysql> CREATE TABLE IF NOT EXISTS countries ( 
    -> COUNTRY_ID varchar(2),
    -> COUNTRY_NAME varchar(40)
    -> CHECK(COUNTRY_NAME IN('Italy','India','China')) ,
    -> REGION_ID decimal(10,0));
Query OK, 0 rows affected, 2 warnings (0.30 sec)

mysql> DESC countries;
+--------------+---------------+------+-----+---------+-------+
| Field        | Type          | Null | Key | Default | Extra |
+--------------+---------------+------+-----+---------+-------+
| COUNTRY_ID   | varchar(2)    | YES  |     | NULL    |       |
| COUNTRY_NAME | varchar(40)   | YES  |     | NULL    |       |
| REGION_ID    | decimal(10,0) | YES  |     | NULL    |       |
+--------------+---------------+------+-----+---------+-------+
3 rows in set (0.01 sec)


c. Write a SQL statement to create a table job_history including columns employee_id, start_date, end_date,
 job_id and department_id and make sure that, the employee_id column does not contain any duplicate value 
at the time of insertion

mysql> CREATE TABLE job_history (
    -> EMPLOYEE_ID int(4) PRIMARY KEY,
    -> START_DATE date NOT NULL,
    -> END_DATE date NOT NULL,
    -> JOB_ID varchar(10) NOT NULL,
    -> DEPARTMENT_ID decimal(4,0));
Query OK, 0 rows affected, 1 warning (0.30 sec)

mysql> DESC job_history;
+---------------+--------------+------+-----+---------+-------+
| Field         | Type         | Null | Key | Default | Extra |
+---------------+--------------+------+-----+---------+-------+
| EMPLOYEE_ID   | int          | NO   | PRI | NULL    |       |
| START_DATE    | date         | NO   |     | NULL    |       |
| END_DATE      | date         | NO   |     | NULL    |       |
| JOB_ID        | varchar(10)  | NO   |     | NULL    |       |
| DEPARTMENT_ID | decimal(4,0) | YES  |     | NULL    |       |
+---------------+--------------+------+-----+---------+-------+
5 rows in set (0.00 sec)


2.Alter Table

a.Write a SQL statement to add a foreign key constraint named fk_job_id on job_id column of 
job_history table referencing to the primary key job_id of jobs table.

mysql> ALTER TABLE job_history
    -> ADD CONSTRAINT fk_job_id
    -> FOREIGN KEY (job_id)
    -> REFERENCES jobs(job_id) ;
Query OK, 0 rows affected (0.23 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> DESC JOB_HISTORY;
+---------------+--------------+------+-----+---------+-------+
| Field         | Type         | Null | Key | Default | Extra |
+---------------+--------------+------+-----+---------+-------+
| EMPLOYEE_ID   | int          | NO   | PRI | NULL    |       |
| START_DATE    | date         | NO   |     | NULL    |       |
| END_DATE      | date         | NO   |     | NULL    |       |
| JOB_ID        | varchar(10)  | NO   | MUL | NULL    |       |
| DEPARTMENT_ID | decimal(4,0) | YES  |     | NULL    |       |
+---------------+--------------+------+-----+---------+-------+
5 rows in set (0.00 sec)


b.Write a SQL statement to rename the table countries to country_new.

mysql> ALTER TABLE countries
    -> RENAME TO country_new;
Query OK, 0 rows affected (0.17 sec)

mysql> DESC COUNTRY_NEW;
+--------------+---------------+------+-----+---------+-------+
| Field        | Type          | Null | Key | Default | Extra |
+--------------+---------------+------+-----+---------+-------+
| COUNTRY_ID   | varchar(2)    | YES  |     | NULL    |       |
| COUNTRY_NAME | varchar(40)   | YES  |     | NULL    |       |
| REGION_ID    | decimal(10,0) | YES  |     | NULL    |       |
+--------------+---------------+------+-----+---------+-------+
3 rows in set (0.00 sec)


c.Write a SQL statement to change the name of the column country_id to con_id, 
keeping the data type and size same.

mysql> ALTER TABLE country_new
    -> RENAME COLUMN country_id to con_id;
Query OK, 0 rows affected (0.13 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> DESC country_new;
+--------------+---------------+------+-----+---------+-------+
| Field        | Type          | Null | Key | Default | Extra |
+--------------+---------------+------+-----+---------+-------+
| con_id       | varchar(2)    | YES  |     | NULL    |       |
| COUNTRY_NAME | varchar(40)   | YES  |     | NULL    |       |
| REGION_ID    | decimal(10,0) | YES  |     | NULL    |       |
+--------------+---------------+------+-----+---------+-------+
3 rows in set (0.00 sec)


3.DML Statement

a.Write a SQL statement to insert a record with your own value into the table countries against each columns.

mysql> INSERT into country_new (con_id,country_name,region_id) values(091,'Italy',121003);
Query OK, 1 row affected (0.15 sec)

mysql> select * from country_new;
+--------+--------------+-----------+
| con_id | COUNTRY_NAME | REGION_ID |
+--------+--------------+-----------+
| 91     | Italy        |    121003 |
+--------+--------------+-----------+
1 row in set (0.00 sec)


b.Write a SQL statement to insert 5 rows by a single insert statement into jobs table.

mysql> INSERT into jobs(job_id,job_title,min_salary,max_Salary)
    -> values(1,'President',15000,22000),
    -> (2,'Administration Vice President',12000,20000),
    -> (3,'Administration Assistant',3000,6000),
    -> (4,'Finance Manager',8200,16000),
    -> (5,'Accountant',4200,8000);
Query OK, 5 rows affected (0.14 sec)
Records: 5  Duplicates: 0  Warnings: 0

mysql> select * from jobs;
+--------+-------------------------------+------------+------------+
| JOB_ID | JOB_TITLE                     | MIN_SALARY | MAX_SALARY |
+--------+-------------------------------+------------+------------+
| 1      | President                     |      15000 |      22000 |
| 2      | Administration Vice President |      12000 |      20000 |
| 3      | Administration Assistant      |       3000 |       6000 |
| 4      | Finance Manager               |       8200 |      16000 |
| 5      | Accountant                    |       4200 |       8000 |
+--------+-------------------------------+------------+------------+
5 rows in set (0.00 sec)


c.Write a SQL statement to change Min_salary  to 8000 and max_Salary to 40000 for Accountant.

mysql> UPDATE jobs set min_salary=8000,max_salary=21000 where job_title='Accountant';
Query OK, 1 row affected (0.08 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> select * from jobs;
+--------+-------------------------------+------------+------------+
| JOB_ID | JOB_TITLE                     | MIN_SALARY | MAX_SALARY |
+--------+-------------------------------+------------+------------+
| 1      | President                     |      15000 |      22000 |
| 2      | Administration Vice President |      12000 |      20000 |
| 3      | Administration Assistant      |       3000 |       6000 |
| 4      | Finance Manager               |       8200 |      16000 |
| 5      | Accountant                    |       8000 |      21000 |
+--------+-------------------------------+------------+------------+
5 rows in set (0.00 sec)